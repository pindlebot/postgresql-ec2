{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template",
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro"
    },
    "VpcId": {
      "Type": "String",
      "Default": "vpc-f2438588"
    },
    "SubnetId": {
      "Type": "String",
      "Default": "subnet-c7e3509b"
    },
    "KeyPair": {
      "Type": "String",
      "Default": "postgres"
    }
  },
  "Resources": {
    "InstanceWaitHandle": { "Type": "AWS::CloudFormation::WaitConditionHandle" },
    "InstanceWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "Instance",
      "Properties": { "Handle": { "Ref": "InstanceWaitHandle" }, "Timeout": "900", "Count": "1" }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP, HTTPS and SSH access",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5432",
            "ToPort": "5432",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "EC2Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*",
                    "autoscaling:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "CfnAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {},
            "commands": {
              "01-gen-random-secret": {
                "command": "echo SECRET_TOKEN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head-n 1) > /tmp/secret"
              },
              "02-install-postgresql": {
                "command": "curl -o- https://gist.githubusercontent.com/unshift/a4ecf2f2e72d846fe8112274c2bbae4c/raw/91a399144af2436ab8cdee03301e9b1bae884a40/install.sh | bash"
              },  
              "03-signal-done": {
                "command": {
                  "Fn::Join": [
                    "",
                    ["/opt/aws/bin/cfn-signal -e 0 '", { "Ref": "InstanceWaitHandle" }, "'"]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": "ami-04681a1dbd79675a5",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [{
          "Ref": "InstanceSecurityGroup"
        }],
        "KeyName": {
          "Ref": "KeyPair"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -v\n",
                "echo timeout=60 >> /etc/yum.conf\n",
                "echo retries=20 >> /etc/yum.conf\n",
                "yum update -y -q aws-cfn-bootstrap\n",
                "function handle_error\n",
                "{\n",
                "ERR_FILE=$(mktemp)\n",
                "(grep ERROR /var/log/cfn-init.log | sed -e 's/^.*] //' >> $ERR_FILE) || true\n",
                "(tac /var/log/cfn-init-cmd.log | grep -m 1 -B 100 ==== | tac | sed -e 's/^.*] //' -e '/^=*$/d' >> $ERR_FILE) || true\n",
                "/opt/aws/bin/cfn-signal -s false -e $1 -r \"Output: `cat $ERR_FILE`\" '",
                { "Ref": "InstanceWaitHandle" },
                "'\n",
                "  exit 1\n",
                "}\n",
                "trap 'handle_error $? ${LINENO}' ERR\n",
                "/opt/aws/bin/cfn-init -s ",
                { "Ref": "AWS::StackName" },
                " --resource Instance ",
                "--region ",
                { "Ref": "AWS::Region" },
                "\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "Instance": {
      "Value": { "Fn::GetAtt": ["Instance", "PublicDnsName"] }
    }
  }
}